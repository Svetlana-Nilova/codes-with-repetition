"""
Задание.

Одним из первых в истории примеров шифрования считаются закодированные послания Юлия Цезаря. Римскому полководцу необходимо было посылать письменные приказы своим генералам, но он не желал, чтобы в случае чего их прочитали недруги. В результате он стал шифровать свои послания довольно простым методом, который впоследствии стали называть кодом Цезаря.
Идея шифрования была совершенно тривиальной и заключалась в циклическом сдвиге букв на три позиции. В итоге буква A превращалась в D, B - в E, C - в F и т. д. Последние три буквы алфавита переносились на начало. 9 Таким образом, буква X становилась A, Y - B, а Z - C. Цифры и другие символы не подвергались шифрованию.
Напишите программу, реализующую код Цезаря для русского языка. Позвольте пользователю ввести фразу и количество символов для сдвига, после чего выведите результирующее сообщение. Убедитесь в том, что ваша программа шифрует как строчные, так и прописные буквы. Также должна быть возможность указывать отрицательный сдвиг, чтобы можно было использовать вашу программу для расшифровки фраз.
"""



"""
Атрибуты модуля
    Методы:
       shifr_cesarya(text, shift) - Производит шифрование, в случае положительного шага/дешифрование текста в случае отрицательного шага.
        main() - Обеспечивает интерфейс при шифровании, в случае положительного шага /дешифровании, в случае отрицательного шага.

    Константы:
        HELLO: str - текстовая строка с назначением программы. 
"""

HELLO = "Программа реализует шифрование Цезаря для русского языка"


def shifr_cesarya(text: str, shift: int) -> str:
    """
   Производит шифрование, в случае положительного шага/дешифрование текста в случае отрицательного шага.

    Параметры метода:
        text:str - текст введённый пользователем для шифрования, в случае положительного шага /дешифрования, в случае отрицательного шага.
        shift: int - число символов для сдвига.
    
    Переменые метода:
        letter: str - буква из text.
        offset: str - зашифрованная буква.
    Возврат:
        result: str - текст полученный в результате шифрования, в случае положительного шага /дешифрования, в случае отрицательного шага.
    """

    result = ""
    
    for letter in text:
        if "А" <= letter <= "Я":
            offset = chr((ord(letter) - ord("А") + shift) % 32 + ord("А"))
            result += offset
        elif "а" <= letter <= "я":
            offset = chr((ord(letter) - ord("а") + shift) % 32 + ord("а"))
            result += offset
        else:
            result += letter
            
    return result

def main():
    """
    Обеспечивает интерфейс при шифровании/дешифровании текста в случае отрицательного шага.
    
    Переменные метода:
        user_text: str - текст введённый пользователем для шифрования, в случае положительного шага /дешифрования, в случае отрицательного шага.
        user_shift: int - число символов для сдвига
        itog: str - текст полученный в результате шифрования, в случае положительного шага /дешифрования, в случае отрицательного шага.
    """

    print(HELLO)

    user_text = input("Введите фразу для шифрования/дешифрования: ")
    user_shift = int(input("Введите кол-во символов для сдвига(для дешифрования введите отрицательное число): "))

    itog = shifr_cesarya(user_text, user_shift)
    print("Результат сообщения:", itog)

main()
